<?php

namespace Application;

use Application\Day\WeekDay;
use Application\Shift\DayShift;
use Application\Shift\EarlyShift;
use Application\Shift\LateShift;
use Application\Shift\NightShift;
use DateTime;
use DateInterval;
use Exception;


/**
 * Abstract class Day
 * @author Wojciech Polus
 * @package Application
 */
abstract class Day
{

    /**
     * Day number in the cycle
     * @var int
     */
    protected $dayNumber;


    /**
     * Day date
     * @var DateTime
     */
    private $day;


    /**
     * Day shifts
     * @var Shift[4]
     */
    protected $shifts;


    /**
     * Day constructor.
     * Constructor based on period begin date and day number creates real date object
     * Constructor makes sure to create 4 changes
     * @param int $dayNumber
     * @param string $dateStart
     * @throws Exception
     */
    public function __construct($dayNumber, $dateStart)
    {
        $this->dayNumber = $dayNumber;

        $date = new DateTime($dateStart);
        $interval = DateInterval::createfromdatestring('+'.($dayNumber - 1).' day');
        $date->add($interval);
        $this->day = $date;

        $this->prepareShifts();

        if (count($this->shifts) != 4) {
            throw new Exception("Day required four shifts");
        }
    }


    /**
     * Returns day number
     * @return int
     */
    public function getDayNumber()
    {
        return $this->dayNumber;
    }


    /**
     * Returns day
     * @return DateTime
     */
    public function getDay()
    {
        return $this->day;
    }


    /**
     * Returns shifts
     * @return Shift[]
     */
    public function getShifts()
    {
        return $this->shifts;
    }


    /**
     * Checks if shift is full
     * @return bool
     */
    public function shiftsCompleted()
    {
        foreach ($this->shifts as $shift) {
            if (!$shift->isFull()) {
                return false;
            }
        }

        return true;
    }


    /**
     * Returns night shift
     * @return NightShift
     */
    public function getNightShift()
    {
        foreach ($this->shifts as $shift) {
            if ($shift instanceof NightShift) {
                return $shift;
            }
        }
    }


    /**
     * Returns late shift
     * @return LateShift
     */
    public function getLateShift()
    {
        foreach ($this->shifts as $shift) {
            if ($shift instanceof LateShift) {
                return $shift;
            }
        }
    }

    /**
     * Returns EarlyShift
     * @return EarlyShift
     */
    public function getEarlyShift()
    {
        foreach ($this->shifts as $shift) {
            if ($shift instanceof EarlyShift) {
                return $shift;
            }
        }
    }

    /**
     * Returns DayShift
     * @return DayShift
     */
    public function getDayShift()
    {
        foreach ($this->shifts as $shift) {
            if ($shift instanceof DayShift) {
                return $shift;
            }
        }
    }


    /**
     * Checks if nurse works in this day
     * @param Nurse $nurse
     * @return bool
     */
    public function nurseExists(Nurse $nurse)
    {
        foreach ($this->shifts as $shift) {
            if ($shift->nurseExists($nurse->id())) {
                return true;
            }
        }

        return false;
    }

    /**
     * Returns nurses attached to shifts belongs to this day
     * @return Nurse[]
     */
    public function getNurses()
    {
        $nurses = array();

        foreach ($this->shifts as $shift) {
            $nurses = array_merge($nurses, $shift->getNurses());
        }

        return $nurses;
    }


    /**
     * Checks if day is in weekend
     * @return bool
     */
    public function isWeekend()
    {
        if ($this instanceof WeekDay) {
            return true;
        }
    }


    /**
     * Method must be overloaded by class extend Day Class,
     * In this method should by created 4 types shifts
     */
    protected abstract function prepareShifts();

}
